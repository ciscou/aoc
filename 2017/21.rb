input = <<EOS
../.. => .##/.##/###
#./.. => .../#.#/###
##/.. => .##/.../.#.
.#/#. => ###/.#./##.
##/#. => .#./#../#.#
##/## => .##/#.#/###
.../.../... => ####/.##./####/.#..
#../.../... => ..../..##/#.../.##.
.#./.../... => #.#./##.#/#.../#.#.
##./.../... => .#../.##./#.../....
#.#/.../... => ###./..##/..##/##.#
###/.../... => .###/#.##/..../....
.#./#../... => ##.#/#..#/.##./...#
##./#../... => ..../#..#/#.#./...#
..#/#../... => #.##/.#../.#.#/###.
#.#/#../... => ##../.#.#/...#/...#
.##/#../... => ##.#/.##./..#./##.#
###/#../... => ...#/####/..#./#...
.../.#./... => ##.#/#.#./..##/.##.
#../.#./... => .#.#/#.##/.##./....
.#./.#./... => #..#/#.../.##./....
##./.#./... => ###./###./..##/#..#
#.#/.#./... => .###/...#/###./###.
###/.#./... => ...#/..##/..#./#.##
.#./##./... => .##./.#../...#/..#.
##./##./... => .###/..#./.###/###.
..#/##./... => .#.#/..#./..#./...#
#.#/##./... => .#.#/##../#.../.##.
.##/##./... => .##./...#/#.##/###.
###/##./... => ...#/###./####/#.##
.../#.#/... => #.#./#.../#.#./..#.
#../#.#/... => ###./##../..#./.#..
.#./#.#/... => #.../..##/#..#/#.#.
##./#.#/... => #.#./.##./#..#/##.#
#.#/#.#/... => #.##/.#.#/#..#/.#.#
###/#.#/... => #.../##.#/###./....
.../###/... => ..##/...#/##.#/###.
#../###/... => .#.#/...#/#.##/.#..
.#./###/... => ####/#.../..#./.#.#
##./###/... => ..../####/#.##/#..#
#.#/###/... => ####/..#./####/.#.#
###/###/... => ..##/..../...#/.#..
..#/.../#.. => .###/..##/.#.#/.##.
#.#/.../#.. => #.##/#..#/.#.#/##.#
.##/.../#.. => #.##/####/.#.#/..#.
###/.../#.. => ##../##.#/..../##..
.##/#../#.. => ...#/####/..##/.##.
###/#../#.. => ..#./...#/#.../##.#
..#/.#./#.. => #..#/##.#/..##/#..#
#.#/.#./#.. => ..../.###/#..#/..##
.##/.#./#.. => ..#./...#/..##/...#
###/.#./#.. => ...#/..../##.#/....
.##/##./#.. => .#../..##/...#/.#.#
###/##./#.. => .###/#.#./####/#.#.
#../..#/#.. => .###/##.#/##../##..
.#./..#/#.. => ##../.#../###./##.#
##./..#/#.. => #..#/####/####/..##
#.#/..#/#.. => ..##/..../###./..##
.##/..#/#.. => ..##/.#.#/.#../.#..
###/..#/#.. => ...#/.###/.###/.#.#
#../#.#/#.. => ##../##../##.#/.##.
.#./#.#/#.. => ...#/.##./.#.#/#...
##./#.#/#.. => .##./.#../.#../#...
..#/#.#/#.. => ..##/##.#/####/###.
#.#/#.#/#.. => ..../.###/#.../#..#
.##/#.#/#.. => ..#./#.#./.#../...#
###/#.#/#.. => ##.#/#.../##.#/.##.
#../.##/#.. => ..../#.../..#./####
.#./.##/#.. => #..#/.#../#.#./..##
##./.##/#.. => .###/..##/###./....
#.#/.##/#.. => .###/.##./.###/#.##
.##/.##/#.. => #.##/###./.##./...#
###/.##/#.. => ...#/#.##/.##./#.#.
#../###/#.. => #..#/.###/.###/#.#.
.#./###/#.. => ..#./#.#./..../...#
##./###/#.. => ..##/##../#..#/....
..#/###/#.. => ..##/.#../.#../###.
#.#/###/#.. => ..#./.###/..../...#
.##/###/#.. => .##./###./#.../#.##
###/###/#.. => ##.#/..../.##./##.#
.#./#.#/.#. => .##./.#.#/####/....
##./#.#/.#. => ##.#/#.##/####/.#..
#.#/#.#/.#. => ####/.##./##.#/...#
###/#.#/.#. => #..#/#.##/.##./###.
.#./###/.#. => .#../..../.##./##.#
##./###/.#. => ##.#/.#../#.../.###
#.#/###/.#. => ###./###./.#../###.
###/###/.#. => #..#/#.../#..#/.#.#
#.#/..#/##. => #..#/#.../##../###.
###/..#/##. => #.../.#../.###/#...
.##/#.#/##. => .#.#/.##./.#../##.#
###/#.#/##. => #.../..../##../.###
#.#/.##/##. => .#.#/##../.###/#.#.
###/.##/##. => ###./..#./##.#/.###
.##/###/##. => ..#./.#.#/##.#/#.#.
###/###/##. => ##../.#.#/#..#/.#.#
#.#/.../#.# => ##../###./..#./##.#
###/.../#.# => .#../##../..#./##.#
###/#../#.# => ###./#..#/####/....
#.#/.#./#.# => .###/..../.###/##.#
###/.#./#.# => ###./.###/..##/.#.#
###/##./#.# => ..#./..##/#..#/#.##
#.#/#.#/#.# => .#.#/.#../.#.#/#.##
###/#.#/#.# => .###/#.../##../.###
#.#/###/#.# => .#../...#/..../...#
###/###/#.# => #..#/##.#/..#./#...
###/#.#/### => .###/.#.#/..#./####
###/###/### => ##.#/..##/.#../..##
EOS

def rotate_2x2_pattern(pattern)
  [
    [2, 0],
    [3, 1]
  ].map do |row|
    row.map { |j| pattern[j] }.join("")
  end.join("/")
end

def flip_2x2_pattern(pattern)
  [
    [1, 0],
    [3, 2]
  ].map do |row|
    row.map { |j| pattern[j] }.join("")
  end.join("/")
end

def rotate_3x3_pattern(pattern)
  [
    [6, 3, 0],
    [7, 4, 1],
    [8, 5, 2]
  ].map do |row|
    row.map { |j| pattern[j] }.join("")
  end.join("/")
end

def flip_3x3_pattern(pattern)
  [
    [2, 1, 0],
    [5, 4, 3],
    [8, 7, 6]
  ].map do |row|
    row.map { |j| pattern[j] }.join("")
  end.join("/")
end

replacements_2x2 = {}
replacements_3x3 = {}

input.lines.each do |line|
  line.chomp!

  pattern, output = line.split(" => ")

  case pattern.length
  when 2 * 2 + 1
    4.times do |rotations|
      2.times do |flips|
        p = pattern
        flips.times { p = flip_2x2_pattern(p.gsub("/", "")) }
        rotations.times { p = rotate_2x2_pattern(p.gsub("/", "")) }
        replacements_2x2[p] = output
      end
    end
  when 3 * 3 + 2
    4.times do |rotations|
      2.times do |flips|
        p = pattern
        flips.times { p = flip_3x3_pattern(p.gsub("/", "")) }
        rotations.times { p = rotate_3x3_pattern(p.gsub("/", "")) }
        replacements_3x3[p] = output
      end
    end
  else
    raise "unknown pattern #{pattern}"
  end
end

grid = [
  [".", "#", "."],
  [".", ".", "#"],
  ["#", "#", "#"]
]

18.times do |i|
  puts i

  if grid.length.even?
    n = grid.length / 2

    subgrids = []
    n.times do |row|
      subgrids[row] = []
      n.times do |col|
        subgrids[row][col] = [
          [grid[row * 2 + 0][col * 2 + 0], grid[row * 2 + 0][col * 2 + 1]],
          [grid[row * 2 + 1][col * 2 + 0], grid[row * 2 + 1][col * 2 + 1]]
        ]
      end
    end

    replacements = subgrids.map do |row|
      row.map do |subgrid|
        pattern = subgrid.map { |r| r.join("") }.join("/")
        replacements_2x2[pattern].split("/").map(&:chars)
      end
    end

    grid = []
    (3 * n).times do |row|
      grid[row] = []
      (3 * n).times do |col|
        subgrid_row_idx, subgrid_row = row.divmod(3)
        subgrid_col_idx, subgrid_col = col.divmod(3)
        grid[row][col] = replacements[subgrid_row_idx][subgrid_col_idx][subgrid_row][subgrid_col]
      end
    end
  else
    n = grid.length / 3

    subgrids = []
    n.times do |row|
      subgrids[row] = []
      n.times do |col|
        subgrids[row][col] = [
          [grid[row * 3 + 0][col * 3 + 0], grid[row * 3 + 0][col * 3 + 1], grid[row * 3 + 0][col * 3 + 2]],
          [grid[row * 3 + 1][col * 3 + 0], grid[row * 3 + 1][col * 3 + 1], grid[row * 3 + 1][col * 3 + 2]],
          [grid[row * 3 + 2][col * 3 + 0], grid[row * 3 + 2][col * 3 + 1], grid[row * 3 + 2][col * 3 + 2]]
        ]
      end
    end

    replacements = subgrids.map do |row|
      row.map do |subgrid|
        pattern = subgrid.map { |r| r.join("") }.join("/")
        replacements_3x3[pattern].split("/").map(&:chars)
      end
    end

    grid = []
    (4 * n).times do |row|
      grid[row] = []
      (4 * n).times do |col|
        subgrid_row_idx, subgrid_row = row.divmod(4)
        subgrid_col_idx, subgrid_col = col.divmod(4)
        grid[row][col] = replacements[subgrid_row_idx][subgrid_col_idx][subgrid_row][subgrid_col]
      end
    end
  end
end

grid.each do |row|
  puts row.map { |c| c.chars }.join(" ")
end
puts

res = grid.sum do |row|
  row.select { |c| c == "#" }.length
end

puts res
