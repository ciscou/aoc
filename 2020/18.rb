input = <<EOS
2 + (2 + 6 * (4 * 5 * 8 * 7) + 3) * (9 + (4 * 3 * 7 * 9)) * 7
7 * ((9 + 3 + 2 * 8 + 8 + 6) * 5 * 7 * 4 * 9 * 4) + (2 + 9 * (7 * 8 * 2 + 9 + 7) + 8 + (4 + 9 * 7) * 3) * 4 + 9 * (4 * 8 * 4)
9 * 2 + (9 * 7 * 4 + 4 * 6 + (8 + 9 + 3 * 3))
(2 * (2 + 4 * 7 + 8) * 5 * 7) * 6 + 4 + 4
9 + 7 * (2 * (3 * 3 + 9 + 8 * 4) + 8 * 9) * 6 * 9 + 8
7 + (9 + 4 * 5 * 4 + 6 + (8 + 7 + 4 + 7 + 6)) + (3 * 7 * 8 * 2) * 3 * 3 + 5
7 * 2 + (2 + 5 + 4 * 5) + (4 * 2 * 5 * (5 * 2 * 6 * 9)) * (7 + 6 + 5 + (4 * 2 + 4 + 6 + 6) + 9 + 2)
((4 * 4 + 4) + 3 * 2) * 3 * 8 + 7 + 8 + 6
(4 + 8 + 5 + 3 + (8 + 8 + 4)) * 5 + 5 * (9 * 8 * 2 + (4 * 3)) + 7
2 * 7 + 8 * 3 + 8
8 + 7 * ((4 + 4 + 3 * 8 + 3) * 7 * 6 * 6 * 2)
4 + 2 + (6 * 4) * 5 + 7 * 9
8 * 6 + 9 * (8 + 4) + 3
9 + 2 + 2 + ((4 + 4 * 8 + 6 * 6 * 5) * 8 * 2) * 9 * (6 + 3)
(2 * 7 + 7 + 9 + 3) * (3 + 8 + 7) + 4 * (9 + 9 + (2 + 2 + 3 * 5 * 5 * 3) * (6 * 2) + 9) * 3
(2 + 4 * 6 * (5 * 8) * 2) * 3 * 3 + 3 * 3
(5 + 4 * (3 * 2 * 9 * 4 + 9) * 4) * 5
2 * (4 + (7 * 9 * 9) + 8 * (8 * 4 + 5 + 2) + 4) + 7 + (5 * 5 + 7 + (4 * 8 * 5 * 2 * 2)) * (4 + 5 + 4 + 8 + 6) + 4
4 * 2 * ((6 * 2 * 5) * 8 * (5 + 8 * 7))
9 * (7 + 2 + 7 * 3) * 6 * 3
6 * 6 * 8 + 6
2 * 2 + 8 + 3 * (6 + 3 + (9 + 2 * 3 * 5 * 4 * 2) * 7)
((8 * 9) + 6 + (2 + 7 * 9 + 8 + 3 * 8) * 8) + 6 + 6 * (9 * (5 + 7 + 3 + 8 + 8 * 3) + (2 + 4 + 2 + 5) + (2 * 8 * 8 * 9 * 4 * 4) + 3 * 2) + (5 * 7 + 3)
4 + 6 * 7 * 7 * (9 * (2 + 8) + 3 + 4 * 2 * (2 * 8 + 9 * 9))
(5 + 3) * (5 * (4 * 4) + (7 * 7 + 7 * 5 + 6) + 3 * (8 + 7 + 4 * 8 + 8 + 5) + 5) * 8 * 9
(7 * 8 * 3 * 4 + 7 * 3) + 9 * 2 + 7 * (8 * 2 + 8 * 2)
7 + 5 + 4 + (9 + 7 * 9 * 4) + 2 * 6
((3 * 5 + 4) + 3 * 4) + 2 * 3
8 + (5 * 5 + (2 + 4) + 3 + (5 + 9 + 4) * 6) + ((5 * 7 + 4 + 8 * 2) + 3 * 4) + 5 * (7 * (7 + 2) * (5 + 5) + 5 * (6 * 4 + 8) * (3 * 6 + 5 * 2 * 2 * 3)) + 6
4 * (7 * 2 * 2 + 7 + 3 + (7 * 4 + 4 + 4)) + 4 + 8 * 5 * 4
6 + 3 * 7 * ((5 + 9 + 3 * 2 + 5) + (8 * 8 * 4 * 4 * 7 * 2))
8 + 5 * 8 * 4 * (6 * 5 + 3 * (6 * 3 * 7) * 6)
((7 * 5) * (3 * 3 * 5 * 8 + 8) + 4 * (6 * 8 * 6) * 9) + 8 * 7 + 9 * 6
(2 * 5 * 3 * 3 + 6) + (8 * 4 + (2 + 3 * 8) * 6) + 2 + 5
(5 + 2 * 6 * 7 * 3 * 7) + (7 + (3 + 2))
6 + (8 + 7 + 5 + (2 * 5 + 4 + 5 * 7 * 3) * 7) * 7 * 5
4 + 4 + 4 * 6 * 2 * 5
4 + (3 * (3 * 2 * 5 * 8 * 3)) + 5 * 9
8 + 6 + (2 + 2 * 7 + 3)
5 * 6 * 5 + 5
(7 * 2 * 8 * 6 + 7) * 9 + 9
5 + 3 + (5 * (7 * 5)) * (7 + 2 * 3 + (3 * 6 + 3) * 3) + 6 + 4
(5 + (9 + 5 + 7 + 3 + 9 * 8) + 4 + 5 * 9) * 4 * 5
4 + ((9 * 6 + 8) * 6 * (8 + 9 + 3) * 8) * 9
2 + (9 + (9 * 9 + 3 * 3)) + 3 + 6
4 * ((8 + 6 * 5 + 5) * 3 + 2 + 2) * ((9 * 9) * 5)
8 * ((2 + 6 * 3) * (8 * 2) + 8 + 8) + 8 + (5 + 5 + 2)
8 * (4 * (5 + 9 + 3 + 3 * 2) + 7 + 5 * 5)
9 + 4 + 4 * 7 * (2 + 4)
6 + 4 * (8 + 4 + (5 + 7 + 6 + 4 * 7)) * 6 * (8 * (7 + 7 + 6 * 2) + 4 * 4 + 3) * (4 + (8 + 5 + 6) * 9 * 8 * 4)
7 * (2 * 4 * (7 + 5 + 8 + 2) * 8) * 2
((7 + 4 * 8) * 9) + (6 * (7 * 6) + 9 * 9) * 7 + 2 * 8 + 2
(8 * 4 * 6 + (7 * 3 + 2 * 7) + (6 + 2 + 7 * 9 * 6 + 2)) + 9 * 6 + (2 * 5 + (7 * 2) * 8 * 2) + 9 + 9
(3 + (7 * 3 + 3 * 5 + 6 * 6)) * 3
8 + 2 * 7 * 3 * (3 * 5 + 4 + 8)
(9 * (9 * 2 + 7 + 6 * 6)) * 2 * 2 + 9 + ((9 + 7 * 7 + 4 + 6) * 5 + 9 + 3 * 8 + 6)
5 * 7 + 5 * (3 + 3 * 3 * 6 * 4 * 2) * (3 * 3 + 2 + 4 * 7 + 3) + 9
7 + (3 + 7 + 4 * 3 * 3 * (4 + 9 + 4)) + 3
6 * 8 * 7 * ((2 * 7 * 2 + 7 + 7 * 2) * (4 * 9 + 3 * 7 * 7)) * 9 * 3
5 * 5 + 8 * 5
(4 + 6 * 9 * 4 + 9) * 5 * 3 + 2 * 7 + (6 * 9)
(2 + 9 + 3 * 7) * 8
4 * ((3 * 8 + 3 + 9 * 9) * 9 * 3 * 6 * 7 * 3) + (8 + 7)
2 * (2 + 4 + 9 * 4 + 9) * 6 + 5
5 + 9 + 7 + (2 + (2 * 5 * 6 + 5 * 2)) + (9 * 3 * 7)
5 + 4 * (7 + 7) + (2 * 5)
5 * 5 + 3 * (7 + 5 * (8 + 8 + 2 * 4 * 9 * 6) + 6)
4 + (7 * (6 * 5) * 9 * 4 + (6 + 6 * 7 + 2)) + 9 * 2
(6 * 7 + (8 * 7 + 2 * 2 * 8 * 9) + 8 + 8) + 6 * 8 * (9 + 6 + (4 + 4 + 6 * 2) * 9 * 8 + 4)
(4 + 9 * 3) * 3
5 + ((3 * 9 + 2 + 7 * 4) + (8 * 7) * 6) * 2 * (2 + 8 * 7 * 8) + 3
7 * 4
(4 * 6 * (3 * 3 + 2) * 3 + 2) + 2
4 * 6 + (3 * 7 * 4 * 4) + 3 * 8 + 2
2 + 6 + ((4 + 7 * 6) * (5 + 4 + 7 + 8 + 8) + 4) + 2 * (4 + 3 + 6 + 7 + (9 * 4 * 7 * 3 + 3) + 3)
9 * 7 * (8 * 6 * 2 * 7) + (3 * 5) + 6 + 3
7 * 4 * 3 + 2 + (7 + 5 + 5 * (5 + 6 * 2 * 6) + (2 + 8) * 9) + 2
(6 * 7 * 8) + (7 + 9 * 6 * 2 * 9 * 2) * (3 * 5 * 6 + 9 * 4) * 5 + 4
((6 + 9 * 8 + 3) + 5 + 4) + (3 * 5 + (2 * 9)) * 8 + 8 + 5
(7 + 5 + 7) * 6 * (6 + 6) * (3 + 9 + 8 * (6 + 3 * 7 * 9) + 2) * ((8 + 7 + 7) * 8 + 6) + 3
3 * 5 * 8 * 9
(7 + 2 * 7 + 9 * (6 * 6 * 2 + 9 * 3 + 3)) * 3 * (4 + 8 + 2 + 7 + 9 * 7) + (7 + 5 * 4 * 3 + 8) * 7
8 + 3 + 7 + 3 * (7 * 5 * 4 * 3 + 7 * (9 * 5 + 4))
5 + 4 + 9 + 8 + 4 * ((5 * 8 + 5 + 4) * 5)
(2 + 4 + 3) * 2 * (8 * (3 * 7 * 5 + 7 + 3) + 7 * (7 * 2 * 7 * 2 + 8 + 9))
6 * (3 * 7 * 5 * 5)
2 * (5 + 6 * 3 * 7 + 4) + 8 + 7 + (4 + 5 * (3 * 8 + 4 + 5)) * 8
9 + (8 + (9 * 6 * 5 + 8 + 3 + 8) + 2) + (2 + (3 + 8 + 7 * 4 * 9 * 5) + (8 + 7 * 8 + 3) * 8 * 7 + 5) * (2 + (9 * 2 + 5 + 5 + 6 + 9)) + 7
6 * (7 * 8 + 6) * 3 + ((7 * 8 + 3 * 9) * 5 + 5 + (5 + 5 * 3 * 5 * 4 * 6) * 9)
7 + (8 * 7 + (9 + 4 * 4 * 8 * 4)) * (3 + 5 + (3 * 4 * 3) + 3 + 7 * 8)
7 + (4 + 9 * 5) * 9 * 9 * 4
6 * (7 + 5 + (9 + 7 * 9 + 5))
2 * 9
7 * (4 + (9 + 6 * 4 * 7 * 6 + 3) * 3 * 2) + 6 * 2 + 6
(3 + 2 * 6) * 6 * (7 * 7 + 7 * 4 * 7) + 3 * 6 + 7
2 + 9 + 7 + 4 + (5 + 5 + 2 * (8 * 9 * 3 + 9 + 8) * 2)
((5 + 6 * 5 + 5 + 7 + 2) * (8 * 5 * 3 * 3 * 6) * 9 * 8) * 3 * 8 * (9 * 5 * 8 * 4 + 6)
(8 * (9 + 2 + 2 * 6) * (9 * 9 + 4 + 8) + 7 * 9 + 6) + 7 + 2 + 6 * 7 + 5
2 + 5 * ((2 + 9 + 6 * 7 * 6 + 8) * 9 * 8 + 9 + 9 * 8) * 4
8 + ((3 * 2) + (4 * 3 + 4 + 7 * 4 * 9)) + 5 * 4 + 3 * 9
5 * 8 + ((9 + 5) + 5 + 8) * 5 + ((3 + 2) + 8 * 3) + 5
4 + 3 + ((9 * 4 * 7 * 2 + 9) + 7 * (6 + 6 + 4 * 7) * 2 * 6) * 9 * 3
7 * 6 + 3 * (6 * (3 * 4 + 7 + 7) * 2 * (3 * 7 * 2) + (7 + 3 + 5 + 6 * 4)) + 8
3 + ((7 * 7 + 7 + 9) * 5 * 3 + 6 * 9) * 2 + (6 * 6 + 2 * 7)
3 * ((3 + 9 + 5 + 5 * 5) * 3 + 3) * 7 + 3 + 3 + 5
8 + (4 + 7 + (7 * 2 + 3 + 6 * 6 + 7))
2 * (8 + 2 * 4 * 6 * 3) + 4
8 * (8 * 8 + (9 + 5))
(5 * 3 + 6 * 5 * 7 + 4) * 4 + 9
9 + ((5 * 4 + 9 * 6 + 5) * 4 + 7 + 2) * (4 + 5 * 8 * 6 + 3) + 7
(4 * 9 + 4 + 6 * 4 + 7) + 8 + 8 + 2
7 + (8 * 6 + 4 + 5 + 9) * 7 + 6 * 3 * 4
(3 + 5) + 3 * 5 + 3
8 + 2 * 4 + 7 * (8 + 8 * 9)
7 * (2 * (6 + 9) * 8 + (5 * 5 + 8 + 6 + 6) + 6) * 4 * 4
(3 + 6 * 8 + 5 * 2 * 9) + 3
((9 * 7 + 9 + 3 * 7) * 3 + 6 * 6) * (5 + 5 * 3 + (7 + 8 * 3 + 7 + 4 * 7)) + 7 + 8 + (4 + (2 * 6 * 2 * 6) * 8)
6 * ((3 + 7 * 6 + 7 * 5) * 6 * 3 * 7 + 6 * 2) + 8 * 7
7 + 3 + (8 + 9 * 8 + 9 + 3 * (6 * 7)) + 4 * (6 * 7 + 7 * (6 + 9) + 6 + 2)
5 * 3 * (2 * 6) * (9 + (2 * 2) + 6)
4 * 8 * 4 + 7 + 7
3 + 8 * ((5 * 4 * 7 * 9) * 9 + (6 * 6 * 5 + 7)) * 9 * 4 * (4 + 6 * (4 * 7 + 6 + 2))
(9 * 3 + 2 + 3 + 2 * 8) * 2 + 5 + 2 * 9
3 + 7 + 7 + (9 * 7 * 3 * 8) + 3
2 + 3 + (8 * 4) * 7 * 4
(9 + 8) + 8 * 8 + 6 + 3
(9 + 5) * (2 * 5 + 3 * 7)
9 + (8 + 3 * 4) * 5 * ((7 * 6 * 4 * 6) * 2 * 4 + 3 * 5)
(7 + 5 * 6 * 7 + 4 + 2) + 8 * (8 * 3) + (6 * (9 * 3 * 7 + 7)) * 7
7 * 2 + (7 + (2 * 6 + 9 + 9 + 5 + 2) + (4 * 5 + 4 + 3 * 7) + 8) * 8
(6 * 4 + 6 + (5 + 6 * 4) * 2 + 5) * (3 + 2) + (8 + (8 * 7 * 9 + 5) * 5 * 6) + 8 + 5 + 7
5 + 4 * 4 + 3 + 8 * (2 * 4 + 5 * 3)
4 * 3 + 6 + 6 * (4 + 9 * (4 * 9)) * 6
7 + ((3 + 5 + 8) + 9 + 8 + 6 * 9 + (9 + 5 + 7))
(6 + 7 + 7) * 9 + 6 + 7
8 + (2 + 6 * (4 * 8 * 3 * 2 + 9 + 8) * 8 + (9 + 5)) * 5
6 + 5 * 5 * (6 + 9 + 3) * (5 + 9 + 6)
((8 * 8 + 5) * 6) * 7
8 + (4 + 6) + (4 + 6) + (8 * 4 * (6 + 6) * 8 * 6) * 6 + 2
9 * (6 + 7)
(6 + 3 + 6 * 8 + (4 + 8 + 3)) * 4
6 + (6 + 4 + 7 * 9 + 4 * 6) * 3 * 3 * 8 * 6
7 * (6 + 5) * 7 + 7 + ((3 * 3) + (9 * 8 + 6) + 4)
6 + (3 + 2) * (5 * (2 * 7 * 6) * 2 * (2 * 8 + 7)) + 7 + (5 + (5 + 8 * 4 + 8) * 2 + 3 + 9 * 7)
9 + 8 + 6 + (6 + 8 + (9 + 9 + 9 * 6 * 7 * 7)) * 7 * 5
9 + 5 * (2 + 6) * (8 * 2 * 8)
(3 * 3 + 2 + 6 + 5) + 4 * 3 * (9 + 9) * 7
(6 * 8 + 9 + 2 + 7) + 5 * (9 + 4 * 9 * 9 + 8 * 2)
4 + (5 * 4) * 5 * 5 + 4
8 * ((2 + 2 * 2 + 8 + 6) * 7 + 5 * 6 * 8 + (7 * 6 + 7 + 4 * 8 + 4)) + 8 + 5
8 + (2 + 8 * 3) * (5 + (3 * 6) * 3 * 3 * 7) + (7 * 4 + 7 + 9 * (7 * 6)) + 2 + 5
((7 * 7 * 4 * 4) + 5 + (2 + 5 * 3 * 7 + 6) + 4 + 5 + (5 * 4 + 5 * 4 + 6)) + 3 + 8 + 2 * 5
2 * (2 + (8 * 3 * 9 * 6) * 7 + 9) + 8 * 3
((6 + 6 + 5 + 6 * 5) + (6 + 7) + 2) * 6 * 4 + 6 + 2
3 + 9 + 6 + (3 * 7) + 8 * 2
5 * (8 + 4) + (7 + 3 + 8) + 9 + 3 * ((8 * 7 * 4) * 4 * 5 + 8 * 7 * 2)
2 * 9 + ((7 + 9) + 7 + (2 + 3) * 2 + 2 + 7) * (7 * 8 * 4 * 8) * 7
(6 * (5 * 4) + 6 + 3 + 9) + ((4 + 9 * 5 + 3 + 7) + 5) + (6 * 2 * 9 + 2 + (6 + 2 + 2 + 2) + 7) + 7 * (7 * 4) + 2
((7 + 4 * 7 * 8) * 9 + 6) + ((9 + 7 + 6 + 2 * 9) * (4 * 9 * 6 * 3 + 8) * 6 + (9 * 6 * 5) + 7 * (6 * 7 * 8 * 5 * 7))
8 + (8 * (9 + 9 * 6 * 9 * 3) * 2) + 2 * 4
6 + (6 * 5 * 8 + 4 + (6 * 8 + 5)) + ((7 * 9 * 5 * 7) + 6) * 6 * 3 + 4
9 * 4 * 4 + (8 + 2 + 2)
(9 * 6) * 8
8 + 5 + 9 * 3 + 4
((8 + 5 + 7 * 5) + 5 * (2 * 5 + 2 + 5) * 3 * 4) + 9 + 8
(5 * 6 * 5 * 6 + 9) * 8 * 8 + 2 * 8
4 * (2 + 6 + 4) + 6
(9 + 9) * (2 + 2 * (8 + 3) + 9 * 6) + 4 * 4
2 * (8 * (9 * 9 * 2 * 5) * (3 + 8 * 2 * 8) + 2 * 9) * 3
(8 * 3 + (3 * 5 + 8 + 4) * 3) * 2 + 9 + 5
3 * (5 * 4 * 4) + 2 + 8
(8 + (7 * 4 * 9 * 6 * 2 * 7) + 6 * 7 * 2) * 7
(7 * 4) + 3 * 7 * 7 * 7 + 3
(3 + 3) * 5 + 7 * (2 * 8 * 6 * 9 * 9 + 8) * 6
9 * 6 * (5 + (3 + 8 * 5) + (2 * 2)) + 6 * ((8 * 2 * 4 + 7) + 7)
(8 + (8 + 2 + 3 + 9) + (8 + 8 * 9 + 4 * 8) * 9) * (3 + 3 + 9 * 6 + 4 * 2) + 4 * (6 + 7 + 9 * 3)
7 * 6 * 6 * (7 * (4 * 4 * 8) + 9 + 8 + 4 + 7)
(8 + 9 + 9) * 2 + 4
(9 * 7 + 3 * 9 * 8 * 3) + 8 + 5 * 8 * 8 * 9
8 + (6 * 2 * 8 + 9 * 2)
7 * ((3 + 3 + 6 * 8) + (9 * 5 * 9 + 3) + 6 * (4 + 6 * 3 + 4 + 3 + 8) * (2 + 2 * 9 + 4) + 8)
2 * 5 * 8 * 5 + 8 * (9 + 6 + (3 + 5 * 2) + (4 + 4 * 6 * 9 + 5))
3 + ((3 + 5 + 4) + 9 + 9 + 4)
((2 * 4) * 2 * 9 + 9) * 9
(7 + 3) * 2 * (6 + 9 * 4 * 6) * 5 * 3
6 * ((3 * 6) + 5 + (2 * 8) * 8 + 3 * 6)
4 * 4 * (7 * 9 + 4 + 9 * 6 + 7) * 9
((8 + 6 * 3 + 5) * 3 + 3 * 8 + (4 * 8 * 3 + 4 * 8)) * 8
8 * (5 * 3 * 3 + 3 * 4) * (7 * 5 * 4) * 3 + 9
(8 + 7 + 3 * 2 + 9 * (8 * 9 * 9 * 6 + 7)) + 2
9 * (2 + 3 + 2 * 6 * (6 * 6 + 8) * 2) + 3 + 7 * 7 * 9
(2 * 8 * 3 * 9 + 7) * 5
4 + 5 + 9 + 5 + 5 + 9
2 + (3 + 4) + 4 + 8 + 3 + (4 * (7 + 3 + 7 + 9 * 3))
2 * (8 + 2) + 6 * 7 * 2 * (7 + 7 + 5)
5 * 2 + (8 * 8 * 2 + 8 * 6 + 5) * 3 * 5
6 + 9 + (6 * 6)
7 + 6
7 * (3 * 7 * 7 + (7 * 8 + 8 * 7 * 7) * 7) * 3
3 * 8 + 5 + ((6 + 9 + 2 + 8 * 9 + 3) + (5 * 8) * 2 * 6 + 8 * (7 + 7 + 2 + 6 + 7)) + (3 * 7)
(2 + 2 + (7 + 8 + 3 * 7 * 2) + 7 * 6 + (5 * 8 + 8)) + 9 + (9 + 7 + 6 + (3 + 8 + 7 + 5 + 9 * 5))
((9 * 6 * 9 * 5 + 3) + 8 * 5 + 7 * 9 * (3 * 4 * 7)) * 4 + 7 + 8 * 9 * (7 * 6 * 3)
(3 * 9) * ((4 + 6) * 8 + 2 * (2 + 2 * 4) + (8 + 2 + 7 * 7 * 2 + 8))
((9 + 5 * 5 * 2) + 8 + 5 + 8 + (6 * 5 + 9 + 5)) * 7 * 6 + 4 + ((4 * 7 * 3 + 9 * 5 * 2) * 3 * 7 + 4 + 9 + 9)
4 + 4 * 5 * (9 * 9 + (9 + 8 * 5 * 8 + 5) + 6) * 7
6 * 8 * 4
3 + 8 * ((6 + 5 + 8) * 9) * 9 * (6 + 8 * 9 + 7 + 8) * (5 * (6 * 2 + 9 + 6 * 6 * 7) * 6 * 2)
9 + 4 + 6 + (2 * 9 * 8 + (7 + 3 + 6 + 3)) + 5
5 + (8 * (2 * 6 * 9) + 8 * (4 * 6) + (7 + 2 * 3 + 2 * 6 * 4) * 3) + 9 + 3 * 2 + 3
6 * 7 + 3 * (8 * 9 + 7 + 4 + 4 + (4 + 8 * 7 + 4 * 4)) + (2 + (3 + 9 * 2) * 6)
4 * 2 * (3 + 4) * 7 + ((9 + 9 * 3) + 4 * 6 + 8 + 8)
4 + 2 + ((7 * 7 + 5 * 2 * 3) * 9 * 5 * (9 + 5 * 5 * 8 * 6 + 3)) * (6 * 4 * 9 + 3) + 3 * 7
5 + (7 * 5 * 4 + 3) * 9 + (7 * 6 * 9 + 6 + 6 * (5 * 4 * 7 * 5 * 2 + 3)) + 5
(4 * 9) + 9 + 4
((2 + 4 + 5 * 4 * 3 * 5) + 6 * 2 + 7 + 7 + (4 * 9 + 2 * 7 * 7 + 2)) * 4 + 8 * 7
6 * 6 + 4 * (2 * 8 * 9 * 2 + (9 * 2 + 5 + 2 * 9 * 6)) * (2 + 9 + 8 * 6 + (5 * 8 * 5) * 5) + 7
7 * 8 * 8 + (5 * 9 * 3 * 2 * 9 * 6) * 4
((2 + 9 + 4 + 7 * 3 * 5) * 7) + 9 * 4 * 8 * 5 * 5
(8 * 4 * 7 * 6) + 7 * 9 * (7 * (3 * 9 * 4 * 6 + 8)) * 2
8 * 7 * 3 + (2 + 9 * 5 + 8 * 3 * 4)
9 + 7 + 8 + 5 * (6 * 3 * 2 + (8 + 3 * 6 + 9) + 6)
(8 + 2 * (3 * 4 * 2) + 7 * 7) + (6 * 5 * (4 + 8 * 5 + 7 + 8 * 3) * 6 + 8 * 9)
2 * (4 + 8 + 3 * 2 * 7 * 4)
9 + 7 * (9 + 8 * 5 + (2 * 5) * (5 * 6 + 3 * 5 * 7 + 3) * 7) * (4 * (3 + 6 * 5 + 8 * 4 * 9) * 8) * 4 + 2
8 * 5 * 3 + 2 * (7 * 6 + (9 * 6 + 4) * 4 * 5) + 6
2 * 3 * 6
6 + (6 + 4 + 4 + 8) * (7 + 6 + 3 + 2) * 2
7 * (3 * 3 * 5 * 8) * (3 + 8 * 4)
((7 + 8 + 9) * 7 + (4 * 3 * 8 * 2 * 5 + 8)) + 7
8 * (2 * 4 + (5 + 5 * 9 + 9 + 7) + 5 * 5) + 4 * (8 * 2)
3 + 2 * (5 + 7 * 2) * 5
3 + 5 + 8 * 6 * 4 + ((6 * 8 * 9 + 4) + 9 * (5 * 9 + 6 * 4) + (2 + 3 + 8 * 7 * 7 * 8))
(6 * 8 + 4 * 2 * (2 * 8)) * 3
8 * 5 + 6 * 3 + ((8 * 6 + 6 * 3 * 3) + 3 * 6 + 4) + 4
(9 * 5 * 7 + 8) + 7 * 9
3 + 9 + ((5 * 7 + 9 * 5) + 8) + 6
5 + 4 * 5 + 2 + (8 * 9 * 8 + 5) + (5 * (8 * 6 + 6 * 4 * 2 + 5))
5 + 7 + 3 + (6 * 9 * 8 + (7 * 6 * 8 + 2 * 4)) * 8 * (5 * (7 + 7 + 4 + 6 * 3 * 6) * 4 + 5 + (6 + 9 + 3 * 7 * 4))
(2 + 2 + (9 * 5 * 6) * 9 + 5 * 9) * 6 * 5
7 + ((6 * 4 + 8 + 7 * 9 + 8) * 6 + 8) + 3 * 2 + 3
4 * 5 + (5 + 9 * (7 * 9) * 4 + 8 + 2) * 3
4 * 6 * (9 + 4 * 7 + 7) * ((2 + 6) * 6 * 8) + 7 + 8
9 * 3 * 3 * 6
5 + (2 * (7 * 9 * 2) + 6) + 7 * 4 + (6 * 4)
2 + 2 + (3 * 5 + 5 * 9 + (9 * 2 + 9 + 5) + 7)
8 * (8 + 2 * 2 * 8 * (9 + 5 + 5 + 9 * 4 * 2) * 4) + 2 + (5 + 7 * 6) + 3 * 8
6 + ((3 + 9) * 6 * (6 + 5 + 6 * 5 + 6))
(6 + 9 * 6 + (3 * 3 * 6 * 3) + (4 + 2 + 5 * 4 + 9 * 2) + 7) * 7 + 8
8 * (5 + 4 + 2 * 5 * 4) * 7 + 6 * 7
(6 * 3 + (9 + 4 * 7 * 2 + 7) * 5 + 3 * 8) + 5 * 7 * 8 + (5 + 5 + 4 + 8 + 3 + 4)
7 * 9 + (7 + 9) * (9 * 6 + 5) * 5
9 + (6 * 2 * 9 * 3) * ((7 + 8) * 8 + 3 + 9)
((8 * 2 + 2 + 5 * 9) * (4 * 9 + 2 * 8 * 2) + 6 + 4) * 8 + 9
6 * 9 * (6 * 2 * (7 + 6) + 9 + (9 + 2 + 7 * 2) + 5) + 2
(5 + 9 + 4 + 8 * 4) * ((8 * 6) * (2 + 9) + 4 * 7 + 9 + (6 * 2 + 5 + 3 * 3))
((4 + 6 + 7 * 5 * 3 * 2) * 9 + (8 + 5 + 7 + 9 * 3 * 4)) * 8 + (4 * (7 * 2 * 9 * 6) * 7 * 9 * (6 + 2) + 2) * 3 * 8
4 + (7 + 7 * 4 + 3 + (8 * 5 + 6 * 4 * 8 + 5) + (5 + 8 + 4 + 3 + 2 * 4))
2 * (5 * 3 * 7 * 4 + 8 * 9) + 6 + (7 * 3 * 9 + 5 + 2 + 2)
((8 * 2) + 5 + 9 + (3 * 8) + 5 * 8) * 2 * 9 * 2
(9 * 7 + 4 * 9 * 7) + 5 * 3 + 7
(5 * (5 * 9 + 2) * 5) * 3 * 8 * (3 + 8 + 4 + 7 * 4 * (2 + 2)) * 6 + 8
7 * (3 + 7 * (3 + 9) + 5 * 3 + 9) + 3 + 5
3 + 2 + 6 * (9 * 6 + (2 * 7 + 2 + 2 + 3 * 5) * 5) * 3
9 * ((3 * 8 * 8 + 9) + 4 + 7 * 4)
9 * (9 * (3 + 6 + 7 * 3) + 4) + 3
7 + 6 * 6 * 7 * 4
7 * 9 + 5 + (7 + 7 + 3 * (7 * 9 * 2 * 9 * 8 * 8))
(6 + 5 * 5 + (6 * 5 + 7 + 5 * 4)) * 8 * (7 + 2 * (2 * 7 + 5) * 6 * 6) * 9 + 5
(3 + (7 + 9 * 6 + 7 * 7 * 2) + (5 + 5 * 6 + 6 * 6) * (9 * 4 + 9 + 7)) + 8
3 * (2 * (2 * 4 + 9) * 5 * 7) * 6 * 6 + 2 * 5
5 * 7 + (8 + 3) + 3
8 * 7 * 4 + 6 + (6 + 8 * 8) * 4
3 + ((8 + 2 + 4 + 5 + 5) * 3 + (2 * 9) + 3 + 6) + 6 + 7 + (7 + 3)
(3 * 4 * 8 + (4 + 5 * 2 * 9)) + 9 * 3 * 3 * (6 * 5 * 6) * 9
8 + (8 * 6 * 7 * 7 * 8 * 8) + (3 + 2 + 5 * 2) + 7 * 6
4 + (2 + 9 + 6 + (4 + 6 + 5 + 4 * 7)) + 2 + ((2 * 4 * 5 + 6 + 4) * 5 + 3 + 7)
2 + (6 * 2 + 4)
(8 + 3 * 3 + 9) + 3 + 9 + 8
8 * 9 + 9 * 2 + 2 * (7 * 9 * 5 + 6 * (2 + 8 + 9 + 9 + 5))
(8 + 7 + (5 + 3 + 2 * 2 + 2 * 7)) * 6 * 9 * 4 * 4
3 + 7 + 4 * 3 + ((6 + 9 + 2 + 7 * 2) + (5 * 9 * 4 + 5) + 8 * (3 * 2 * 9) + 5 * 6) + 3
6 + 2 + 3 * (2 + 9 + (6 * 4 * 8) * 2) + 4 + 2
(7 + 6 + (3 + 6 + 3 * 8 * 5) * 9 * 8) + 7
4 * (4 + 7 * 4) + (3 * 6) + (4 * 4 + 2 + 6) * 5
3 * 4 + 7 + 7 * (3 + 5 + 9 + 4 * 9) + ((9 + 5 * 9 * 5 + 9) * (2 * 4) * 7)
8 * 6 * 9 * (8 + 8 + 3 + 3 + 5) * 2 + 2
7 * (4 + 8 * 7 * (9 + 2 + 9 * 2 + 5 * 3) + 8)
6 * 2 + (2 * 8 * (3 + 2 + 6) + (2 * 4 + 7 * 7 * 6 * 8) * 7 * 4) * 6
5 * 5 * (9 * 3 + 4) * (4 * 3 * 5 + 4 * (2 + 2 + 5 + 7 * 2))
6 * 7 + 3 + (7 * 4 + 7 + 8 * 7) * (5 + 8 + 7 * 4 + 4) + (8 * 7 * (5 + 4 * 8))
(6 + (4 * 2 + 4 + 3) * 3 * (2 * 2 + 5 * 4 * 6 * 7)) + 5 + 7 * 4
2 + ((9 + 2) * 3 * 5 + 2) * 4 + 5 * 3
((7 * 2 + 6 + 6) + 2 + (6 + 6 * 5 * 2) + 5) * 5 + 6 * 2
4 + 9 * (4 * (9 + 4) + 4 + 8 + 7 * 9) + 6 * 4 * 4
3 + ((3 + 7) + 9 * 4 + 3 * 4 + 2) + 4
(4 * 9 * 3 * (2 + 3 * 3 + 6 * 7 + 8)) + 5 * 2 + 8 + 4
2 + (7 + (9 + 7 * 4) * 5 * 9)
((5 * 6 * 9 + 4) + 4) * 2 + 2 + 7 * 3 * 3
4 * ((7 * 9 + 6 + 5 + 5) * 3 * 6 + 6 + 2 * 4) + 2
(4 * (3 + 6 + 3 * 8) + (8 * 4 * 5 * 8 * 9 * 6) + 5 + (5 * 4 * 6) + 6) + 3 * 3 + (8 + 3) + 8 + 7
5 + 7 + 2
7 + 6 * (5 * 6 + (8 + 8 * 9 * 7 + 9 + 7))
9 * ((2 * 2 + 2) + 5 * (8 + 6 * 7 + 7 + 9) + 2 * 5)
(6 * (2 * 8 * 9)) + (8 * (9 * 5 + 5) + 9) * (6 + 7) * 7
9 * (9 + 3 * 9 * 9 * 5 * 4) * 9 + 3 * (9 + 8 * 2)
4 + 4 + (7 + 7 * 8 + 9 + (8 * 6) + 3) + 2 + 7
7 + (7 + 7 * 4 + 5 + (5 + 5 + 9 + 6 * 5)) * 8 + (7 * 4 * 5 + 6 * 8) + 3
7 * 4 * 3 + 6 + 4 + 5
((7 + 6 * 7 + 3) * (8 + 2 * 6 + 7 * 8) * 7 + (3 + 6 * 6 * 4)) + ((8 + 9 * 9 + 8) * (4 * 6 * 8 * 2) + 4 + 9 + 4 * 3) * 8
9 + 2
2 * (4 + 4 * 3 + 4 * 7 + 2) * 5 * 7 * 7
8 * (6 * 6 + (9 * 6 + 6 + 3 + 5) + 5 + 3 + 7)
(5 * 9 + 5 + (6 + 5 * 8 * 3 + 5 * 9) * (9 * 9 * 6 * 2 * 4 + 7)) * 7 * 5 * (8 * 5 + (3 * 7 + 4) * 5 + (4 + 3))
(4 + (6 * 5) + 2) + 8 + 2
4 + (8 * 6 + 7 + 7) + ((5 + 6) + 7 + (7 + 4 * 8 + 5 * 2 + 4)) + (5 + 4 + 7 + (9 + 9 + 5 + 6 + 7) + 4) + ((5 * 6 * 5 * 4) + (6 + 9 * 8 * 3 + 8) * 7 + 6 + (9 + 8)) * ((5 + 3 * 7 * 2) + 8 + 4 * 6)
9 + 5 + 4
(8 * 4 * (3 + 5 + 6 + 8 + 3)) * 9 + 3
6 * 7 * 6 + 4 + (9 * (9 * 9 + 8 + 9 * 6 * 7) * 9 * 6 * 5 * 3) + 8
4 + (3 * (2 * 6 + 2) * 9 + 2) + 6 + 5
9 * 9 * (7 + (2 * 5 + 5 * 9 * 2 * 3) * 8 + (3 * 9 + 7 + 5) * 9 * 9) + 2
4 + (9 * (8 * 3 + 3)) * 4 * 8
2 + 3 + 9 * ((7 * 5) * 7 * 2 * 6) * 4
(7 + (7 + 6 + 3 + 7 * 4 + 4) + 8) + 7 + 8 * 9 * 7 * 7
(8 * 8 * 3 * 2) * (8 + 9 + 8 + 3 + 7) + 7 * 9 * 7 * 3
((2 * 2 + 4 + 3) * (9 * 3) * 5 * 5) * 2 * 5
4 + 8 * 7 * 2 + ((3 * 2 + 4) + (4 * 5 * 4) * (6 + 3))
9 + (6 + 8 + 6 + 9) * 9 * (8 + 9 + (6 + 5 + 8) * 6 * 2 + 7) + (9 + 8 * 9)
2 + (8 + 3 * 6 + 4 * 3 * 4) * 4 * (6 * 3 + 8 + 9)
2 * (6 + 9) * 7 + 9
((3 * 9) + 4 + 6 + 4) * 8 + 7 * (5 * 5 + 4 + (6 + 7 + 6 + 3 + 4 * 2) + (5 + 8 * 7 * 6 + 5) * 3) * 3 * 9
7 + (5 + 8 * 4 * (6 + 6 * 6 * 8) + (3 * 6 * 9 * 9 * 5)) * 2 + 2 + 8 * 6
3 * 4 + 7 * 7 + 6 * (8 + 6)
9 * (3 + 3) * 5
5 + 8 + 8 * 7 + 7 + (5 + (6 * 5 * 8 * 3 + 6 + 3) * 6 + 3 * 9 + 2)
((4 + 9) * 4 + 3 + 6 * 4 + (9 * 9 + 4)) * 4 * 7 * 9 + 8
(3 + (7 + 4 * 9) * 9 + (2 * 7 + 2 * 8 * 3 + 7)) * 5 + ((5 + 7 * 8 * 5 * 4 * 5) * 3 * 3 + 4 * 6 + 2)
2 * 6 * (8 * 3 + 6 + 3 + (2 + 5) + (2 * 3)) + 6 * 4
(4 + (2 * 8) + 8 + 9) * ((8 * 6 + 5) * 8 + 6 + 9 * 8 * 8) + 6 * (6 + 8 + 7 * 6 * 3) * 3
(7 + 2 * 5 * 6 * 9) * 6 + 9 + 3 + 5 + 8
5 + 2 + (2 + (4 + 2) * (3 * 6 * 2 * 4 * 9 + 7) * 6) * 5 + 4
9 * 9 + 3 + 2 * (8 + 7) + ((4 + 3 + 2) + 4 * (5 + 4 * 7 * 9) * (5 * 3) * 8 * 4)
(4 * 7 * 4 + 6) * 3 * 9 * 9 * 2
(4 + 2 + 6 + (9 + 8 + 5 + 8)) + 2 * 9 * 9
3 * (6 * (4 + 4 * 8 * 3)) * ((7 + 9 * 2) * 6 * 5)
3 * 4 + 9
(4 + 3 + 3 * 6) + 2 + (3 * 7) * 2 * (5 + (2 * 6 + 6) + 7 + 4 * 9) + (3 + (6 + 6))
8 + 4 + ((8 * 5 + 8 * 2 + 5) + 6 * 2) * 3
6 + 4 * (5 + 9 + 3 * 8 + (8 * 9 * 4 + 4 + 7) * 8)
6 + ((6 + 6 + 8 * 9 + 5) + 3 + (3 * 8 + 2 + 9 + 8) + 5 * 6 * 8)
3 * (9 + (8 * 4 * 2 * 7 + 2) * (8 + 2 + 6 + 3) + 3 + 7) * 3 + 8 * 8
6 * 2 * 6 * 9 + 5 * 6
9 * 9 + 5 * 5 + (3 + 8) + 5
(9 + 6 * 6 + 9) * 3 + (7 + 6 + 4) + 7 + 3
9 * (3 + 3 + (2 + 9 * 2 + 3) * 8 * 2 + 8) * 9
((3 + 7 * 2 * 8 * 6) * 7) + (9 * 8 * (7 * 7 * 9 + 4 + 6 * 4) + 8 + (4 + 5 * 2 * 2 + 7) * 8) * 4 + 4
(4 + 4 * 8 + 2 * (6 * 4 * 2 + 7) + 4) + 6 * 5 + 7
((9 * 2 + 7 + 8) + 3 * 7 + 2) + 3
5 * (6 + 9 + 9 + 6 + 8 * 2) * (6 * (2 * 9 + 6 + 3) + 8 * 3 * 6)
6 * 6
2 + 9 + 2 * ((9 + 3 + 5 + 6 * 8) + 8 + 7 * 6 * 9) + 9
9 + 4 * 9 * (7 + 7 + 8) + 6
8 * 6 + (3 + 2 + 3 * 4) + 5 * 8
3 + 4 * 6 * 9 + 4 * 5
5 * 6 + 7 * ((8 + 5) + 4 * (6 * 7 * 5) * 7 * (3 + 9 * 4))
9 + 2 * 5 + 7 * 4
5 + 7 * (6 + 4 + 2) * ((3 + 2) + 7 + (7 * 7 * 3 + 7) + 7 + (9 + 9 + 9) * 8)
8 + 9 * 7 + (2 + 8 + (8 * 4 + 6)) * 4
3 * (5 + 7 + (5 + 7 * 6 + 8 * 4 * 7) + (6 + 4 + 5)) * 7 + 4 * (9 * 2 + (5 * 3 + 7) * 2 * 6 * 4) + (6 + 9 * 6 + 2)
(2 * 8 * 7) + 9 + 2 * 3 + 8
((2 + 2 + 8 + 5 * 3) * 2 + 4 * 6 * 2 * 8) * (5 * 6 + (4 + 4) * 5 * 7 + 4) + (6 + (2 * 2 * 5 + 6 + 9) * 5 + 5 * (8 * 7 * 5 + 2 * 7))
((7 * 9 + 8 * 2 * 7) * 5) * 2 * 8 * 2 + ((9 + 8) + 7) * 7
3 + 3 * ((4 + 8) + (3 * 3 + 4 + 9 + 6 * 9) * 2 * 5 * 5 + 4) * 4
2 * 4 * 9 * 5 + (3 + 5) * (4 * (5 + 4 * 9 + 9 + 4 * 8) * 2 * (2 * 2 + 3 + 2 + 6) + (4 * 8) * 6)
5 + (9 + (6 + 6 * 4 * 3 * 6 * 2) + 2) * 5 * 8
7 * 7 + 7 * (4 + 5 * 9 * (9 * 2 * 4))
((4 * 3 * 6) * 5 * 4) * 6 + 3 + 2 * 6
EOS

def find_closing_parenthesis(line, offset)
  raise "wtf" unless line[offset] == "("

  open_pars = 1

  until open_pars == 0
    offset += 1

    open_pars += 1 if line[offset] == "("
    open_pars -= 1 if line[offset] == ")"
  end

  offset
end

def evaluate(line)
  while offset = line.index("(")
    closing = find_closing_parenthesis(line, offset)
    line[offset..closing] = evaluate(line[offset+1..closing-1]).to_s
  end

  tokens = line.split(" ")
  res = tokens.first.to_i

  tokens[1..-1].each_slice(2).each do |op, n|
    res = case op
          when "+" then res + n.to_i
          when "*" then res * n.to_i
          end
  end

  res
end

part1 = input.lines.sum do |line|
  line.chomp!

  evaluate(line)
end

puts part1

# copying myself is cheating???
# https://github.com/ciscou/expressionist

module Expressionist
  class UnaryOperatorNode
    def initialize(a, op)
      @a, @op = a, op
    end

    def to_i
      f = @a.to_i

      case @op
      when "+" then  f
      when "-" then -f
      end
    end
  end

  class BinaryOperatorNode
    def initialize(a, b, op)
      @a, @b, @op = a, b, op
    end

    def to_i
      f1, f2 = @a.to_i, @b.to_i

      case @op
      when "+" then f1 + f2
      when "-" then f1 - f2
      when "*" then f1 * f2
      when "/" then f1 / f2
      end
    end
  end

  class NumberNode
    def initialize(a)
      @a = a
    end

    def to_i
      @a.to_i
    end
  end

  class Parser
    def parse(input)
      @lexer = Lexer.new(input)

      @res = expression
      ensure_next_token_is! ""

      self
    end

    def to_i
      @res.to_i
    end

    private

    def ensure_next_token_is!(expected)
      token = @lexer.next_token!

      Array(expected).include?(token) or raise "Unexpected token #{token.inspect}, expecting #{expected.inspect}"
    end

    def expression
      a = factor

      loop do
        token = @lexer.next_token!
        break unless ["*", "/"].include? token

        b = factor
        a = BinaryOperatorNode.new(a, b, token)
      end

      @lexer.undo!

      a
    end

    def factor
      a = number

      loop do
        token = @lexer.next_token!
        break unless ["+", "-"].include? token

        b = number
        a = BinaryOperatorNode.new(a, b, token)
      end

      @lexer.undo!

      a
    end

    def number
      token = @lexer.next_token!

      case token
      when "("
        expression.tap { ensure_next_token_is! ")" }
      when "+", "-"
        UnaryOperatorNode.new(number, token)
      when /\A[0-9]+\z/
        NumberNode.new(token)
      else raise "Syntax error"
      end
    end
  end

  class Lexer
    def initialize(input)
      @input, @undo = input.dup, false
    end

    def next_token!
      if @undo
        @undo = false
        return @prev_token
      end

      @prev_token = extract_next_token!
    end

    def undo!
      @undo = true
    end

    private

    def extract_next_token!
      @input.lstrip!

      if @input.empty?
        @input
      elsif %w[+ - * / ( )].include? @input[0]
        @input.slice! 0
      else
        @input.slice! %r{\A[0-9]+} or raise "Syntax error"
      end
    end
  end
end

part2 = input.lines.sum do |line|
  line.chomp!

  Expressionist::Parser.new.parse(line).to_i
end

puts part2
